theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
ggplot(data=inspections, aes (x=score)) +
stat_density(aes(color=boro), geom="line") +
coord_cartesian(xlim=c(0,40)) +
labs(title='Density of restaurants by latest score and borough',
x='Score',
y='Restaurant density') +
scale_y_continuous(breaks=seq(0,0.14,0.02),
labels = scales::percent) +
scale_colour_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
ggplot(data=inspections, aes (x=score)) +
stat_density(aes(color=boro), geom="line",position="identity") +
coord_cartesian(xlim=c(0,40)) +
labs(title='Density of restaurants by latest score and borough',
x='Score',
y='Restaurant density') +
scale_y_continuous(breaks=seq(0,0.14,0.02),
labels = scales::percent) +
scale_colour_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
cuisine_filtered
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
CL
View(CL)
#1
tbl_df <- CL %>%
filter(HomeGoal > AwayGoal & HomeTeam %in% c("Barcelona", "Real Madrid"))
tbl_df
nyc_jobs = read.csv('./data/NYC_Jobs.csv')
#1
nyc_jobs = nyc_jobs %>%  mutate(., Salary.Annual.Range.From =
ifelse(Salary.Frequency == 'Hourly', Salary.Range.From*8*5*4*12,
ifelse(Salary.Frequency == 'Daily',Salary.Range.From * 5*4*12,
Salary.Range.From)),
Salary.Annual.Range.To =
ifelse(Salary.Frequency == 'Hourly', Salary.Range.To*8*5*4*12,
ifelse(Salary.Frequency == 'Daily',Salary.Range.To * 5*4*12,
Salary.Range.To)))
nyc_jobs %>%
group_by(., Agency) %>%
summarise(mean_from = mean(Salary.Annual.Range.From),mean_to = mean(Salary.Annual.Range.To),median_from = median(Salary.Annual.Range.From),median_to = median(Salary.Annual.Range.To))
CL %>%
filter(HomeTeam %in% c("Barcelona", "Real Madrid")))
CL %>%
filter(HomeTeam %in% c("Barcelona", "Real Madrid"))
# TA Answer
group_by(df, Agency) %>%
summarise(Avg.Start.Salary=mean(Salary.Range.From)) %>%
top_n(1, Avg.Start.Salary)
nyc_jobs = read.csv('./data/NYC_Jobs.csv')
#3
nyc_jobs %>%
group_by(.,Posting.Type) %>%
summarise(mean(Salary.Annual.Range.To - Salary.Annual.Range.From))
#1
nyc_jobs = nyc_jobs %>%  mutate(., Salary.Annual.Range.From =
ifelse(Salary.Frequency == 'Hourly', Salary.Range.From*8*5*4*12,
ifelse(Salary.Frequency == 'Daily',Salary.Range.From * 5*4*12,
Salary.Range.From)),
Salary.Annual.Range.To =
ifelse(Salary.Frequency == 'Hourly', Salary.Range.To*8*5*4*12,
ifelse(Salary.Frequency == 'Daily',Salary.Range.To * 5*4*12,
Salary.Range.To)))
nyc_jobs %>%
group_by(., Agency) %>%
summarise(mean_from = mean(Salary.Annual.Range.From),mean_to = mean(Salary.Annual.Range.To),median_from = median(Salary.Annual.Range.From),median_to = median(Salary.Annual.Range.To))
#3
nyc_jobs %>%
group_by(.,Posting.Type) %>%
summarise(mean(Salary.Annual.Range.To - Salary.Annual.Range.From))
#4
nyc_jobs %>%
group_by(Level) %>%
summarise(avg_sal_range = mean(Salary.Annual.Range.To - Salary.Annual.Range.From)) %>%
arrange(desc(avg_sal_range))
#6
nyc_jobs %>%
group_by(Civil.Service.Title) %>%
summarise(avg_sal_range = mean(Salary.Annual.Range.To - Salary.Annual.Range.From)) %>%
filter(avg_sal_range == max(avg_sal_range))
# TA Answer
df %>% mutate(Salary.Range=Salary.Range.To - Salary.Range.From) %>%
group_by(Civil.Service.Title) %>%
summarise(Max.Salary.Range=max(Salary.Range)) %>%
arrange(desc(Max.Salary.Range))
df <- df %>%
mutate(Salary.Frequency=sapply(Salary.Frequency, transform)) %>%
mutate(Salary.Range.From=Salary.Range.From * Salary.Frequency) %>%
mutate(Salary.Range.To=Salary.Range.To * Salary.Frequency)
if(x =="Hourly"){
return(1920)
}else if(x =="Daily"){
return (240)
}else{
return (1)
}
# TA Answer
nyc_jobs %>% mutate(Salary.Range=Salary.Range.To - Salary.Range.From) %>%
group_by(Civil.Service.Title) %>%
summarise(Max.Salary.Range=max(Salary.Range)) %>%
arrange(desc(Max.Salary.Range))
#6
nyc_jobs %>%
group_by(Civil.Service.Title) %>%
summarise(max_sal_range = max(Salary.Annual.Range.To - Salary.Annual.Range.From)) %>%
arrange(desc(max_sal_range))
#2
CL_2 <- CL %>%
select(start_with('Home'))
#2
CL_2 <- CL %>%
select(starts_with('Home'))
CL_2
CL_4<- CL %>%  select(contains("Team"), contains("Goal"), contains("Corner"))
#3
CL_4 %>% arrange(desc(HomeGoal))
#4
CL %>% group_by(HomeTeam) %>%
summarise(mean(HomeGoal),mean(HomePossession), mean(HomeYellow) )
#5
CL %>% mutate(score = HomeGoal : AwayGoal)
#1
plot(car$speed, cars$dist)
data(cars)
library(ggplot2)
#1
plot(car$speed, cars$dist)
#1
plot(cars$speed, cars$dist)
#2
ggplot(data = faithful, aes(x = length, y = waiting)) + geom_boxplot()
ggplot(faithful, aex(x = waiting)) +
geom_density(aes(color=length))
ggplot(faithful, aex(x = waiting)) +
geom_density(aes(color=length))
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(color=length))
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.7)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.5)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.9)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.6)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.2)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.3)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.5)
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length), alpha = 0.5, col="green")
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length, color=length), alpha = 0.5, col="green")
ggplot(faithful, aes(x = waiting)) +
geom_density(aes(fill=length, color=length), alpha = 0.5 ) ##col="green"
?t`tbl_df
?tbl_df
?tbl_df
data <- tbl_df(data)
#1
data_chart = data %>%
group_by(season) %>%
summarise(win_ratio = (sum(win=="W")/length(win)))
ggplot(data_chart,aes(x =season, y=win_ratio)) + geom_bar(stat='identity')
data %>%
group_by(season) %>%
summarise(win_ratio = (sum(win=="W")/length(win))) %>%  ggplot(data_chart,aes(x =season, y=win_ratio)) + geom_bar(stat='identity')
group_by(data,season) %>%
summarise(win_ratio = (sum(win=="W")/length(win))) %>%  ggplot(data_chart,aes(x =season, y=win_ratio)) + geom_bar(stat='identity')
group_by(data,season) %>%
summarise(win_ratio = (sum(win=="W")/length(win))) %>%
ggplot(data_chart,aes(x =season, y=win_ratio)) + geom_bar(stat='identity')
group_by(data,season) %>%
summarise(win_ratio = (sum(win=="W")/length(win))) %>%
ggplot(data_chart,aes(.,x =season, y=win_ratio)) + geom_bar(stat='identity')
group_by(data,season) %>%
summarise(win_ratio = (sum(win=="W")/length(win))) %>%
ggplot(aes(x =season, y=win_ratio)) + geom_bar(stat='identity')
ggplot(data_chart2,aes(x =season, y=win_ratio)) + geom_col(aes(fill=visiting), position = 'dodge', stat='identity') + scale_fill_discrete(labels = c("home", "away"))
ggplot(data_chart2,aes(x =season, y=win_ratio)) + geom_col(aes(fill=visiting), position = 'dodge') + scale_fill_discrete(labels = c("home", "away"))
ggplot(knicks3,aes(x=diff, y=ratio)) +
geom_point(color='red4',size=4)+
geom_hline(yintercept=0.5,colour='grey20',size=0.5,linetype=2)+
geom_vline(xintercept=0,colour='grey20',size=0.5,linetype=2)+
geom_text(aes(x=diff,y=ratio,label=opponent),
hjust=0.7, vjust=1.4,angle = -30)+
theme_bw()
#4
# TA Answer
knicks3 <- group_by(knicks, opponent) %>%
summarise(ratio=sum(win=="W")/n(), diff=mean(points-opp))
#4
# TA Answer
knicks3 <- group_by(data, opponent) %>%
summarise(ratio=sum(win=="W")/n(), diff=mean(points-opp))
ggplot(knicks3,aes(x=diff, y=ratio)) +
geom_point(color='red4',size=4)+
geom_hline(yintercept=0.5,colour='grey20',size=0.5,linetype=2)+
geom_vline(xintercept=0,colour='grey20',size=0.5,linetype=2)+
geom_text(aes(x=diff,y=ratio,label=opponent),
hjust=0.7, vjust=1.4,angle = -30)+
theme_bw()
#4
# TA Answer
knicks3 <- group_by(data, opponent) %>%
summarise(ratio=sum(win=="W")/n(), diff=mean(points-opp))
group_by(data, opponent) %>%
summarise(ratio=sum(win=="W")/n(), diff=mean(points-opp))
ggplot(knicks3,aes(x=diff, y=ratio)) +
geom_point(color='red4',size=4)+
geom_hline(yintercept=0.5,colour='grey20',size=0.5,linetype=2)+
geom_vline(xintercept=0,colour='grey20',size=0.5,linetype=2)+
geom_text(aes(x=diff,y=ratio,label=opponent),
hjust=0.7, vjust=1.4,angle = -30)+
theme_bw()
#TA Answer
# Question 4
y2k14 <- read.csv("./names/yob2014.txt", header=FALSE)
#TA Answer
# Question 4
y2k14 <- read.csv(".homework_data/names/yob2014.txt", header=FALSE)
#TA Answer
# Question 4
y2k14 <- read.csv("./homework_data/names/yob2014.txt", header=FALSE)
names(y2k14) <- c("name","sex","freq")
#4.1
y2k14 %>%  filter(grepl("^G",name)) %>% distinct(name) %>% summarise(n())
#4.1
q4.1 %>%  filter(grepl("^G",name)) %>% distinct(name) %>% summarise(n())
#4.1
q4.1 %>%  filter(grepl("^G",name)) %>% distinct(name) %>% summarise(n())
#4.1
q4.1<- y2k14 %>%  filter(grepl("^G",name)) %>% distinct(name) %>% summarise(n())
q4.1
#3
q.4.3 <- y2k14 %>% group_by(name) %>% summarise(sexes = n()) %>%  mutate(sex_bool = (sexes==2)) %>%  summarise(sum(sex_bool))
q.4.3
#4
q.4.4 <- y2k14 %>%  group_by(name) %>%  summarise(freq=sum(freq)) %>%  filter((freq>5000) & (freq <6000))
cuisine_filtered = inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
semi_join(inspections, cuisine_filtered, by = c("cuisine", "cuisine"))
cuisine_filtered = inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
cuisine_filtered2 = semi_join(inspections, cuisine_filtered, by = c("cuisine", "cuisine"))
ggplot(cuisine_filtered2,aes(x =cuisine)) + geom_bar(aes(fill=grade))
ggplot(cuisine_filtered2,aes(x =cuisine)) + geom_bar(aes(dodge=grade))
ggplot(cuisine_filtered2,aes(x =cuisine)) + geom_bar(aes(fill=grade))
#ggplot(inspections,aes(x =boro)) + geom_bar(aes(fill=grade),position='fill')
ggplot(data=inspections) + geom_bar(aes(x =boro, fill=grade), position='fill') +
labs(title ='Restaurants by borough and latest grade', x = 'Borough', y='Restaurants')
ggplot(cuisine_filtered2,aes(x =cuisine)) + geom_bar(aes(fill=grade)) + coord_flip()
ggplot(cuisine_filtered2,aes(x =cuisine)) + geom_bar(aes(fill=grade), position='dodge') + coord_flip()
knitr::opts_chunk$set(echo = TRUE)
#Total counts of inspections that led to closures by borough
inspClosByBoro = inspections %>%
group_by(boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspection = n(),
ratio = closures / inspection)
#Restaurants that were closed at least once (closures, not reclosures as part of the same inspection cycle)
reclosedByBoro =  inspections %>%
filter(action == 'closed') %>%
group_by(camis, boro) %>%
summarize(count = n()) %>%
group_by(boro) %>%
summarize(total_closed = n(),
closed_more_than_once = sum(count>1),
ratio = closed_more_than_once / total_closed)
#Closure and repeat closure combined - by borough
boroClosureRatios = left_join(inspClosByBoro, reclosedByBoro, by = 'boro') %>%
rename(inspRatio = ratio.x, recloRatio = ratio.y)
ggplot(data = boroClosureRatios, aes(x=inspRatio, y=recloRatio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
inspClosByCuisineBoro = cuisine_filtered2 %>%
group_by(cuisine, boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspections = n(),
ratio = closures / inspections)
ggplot(data=inspClosByCuisineBoro, aes(x=cuisine, y=ratio)) +
geom_bar(stat='identity', aes(fill=boro)) +
facet_grid(. ~ boro)
ggplot(data=inspClosByCuisineBoro, aes(x=cuisine, y=ratio)) +
geom_bar(stat='identity', aes(fill=boro)) +
facet_grid(. ~ boro) + coord_flip()
#Faceted bar plot: Inspection closure ratio by top 20 cuisine and borough
ggplot(data=inspClosByCuisineBoro, aes(x=cuisine, y=ratio)) +
geom_bar(stat='identity', aes(fill=boro)) +
facet_grid(. ~ boro) +
labs(title='Inspection closure ratio by top 20 cuisine and borough', x='Top 20 cuisine', y='Inspection closure ratio') +
scale_y_continuous(labels = scales::percent) +
scale_fill_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.key=element_blank(), legend.position="bottom") +
coord_flip()
ggplot(data=trendbyMonth, aes(x=month, y=avg_score)) + geom_line(stat="identity")
trendbyMonth = inspections %>%
group_by(month,boro) %>%
summarise(avg_score = mean(score))
ggplot(data=trendbyMonth, aes(x=month, y=avg_score)) + geom_line(stat="identity")
ggplot(data=trendbyMonth, aes(x=month, y=avg_score)) + geom_line(stat="identity")+
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
trendbyMonth = inspections %>%
group_by(month,boro) %>%
summarise(avg_score = mean(score))
ggplot(data=trendbyMonth, aes(x=month, y=avg_score)) + geom_freqpoly(color=boro, stat="identity")+
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(data=trendbyMonth, aes(x=month, y=avg_score)) + geom_freqpoly(aes(color=boro), stat="identity")+
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
inspClosByMonthBoro = inspections %>%
group_by(month, boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspections = n(),
ratio = closures / inspections)
ggplot(data=inspClosByMonthBoro, aes(x=month, y=ratio)) + geom_freqpoly(aes(color=boro), stat="identity")+
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(data=trendClosures, aes(x=month, y=ratio)) +
geom_freqpoly(stat='identity', aes(color=boro)) +
labs(title='Inspection closure ratio by month and borough',
x='Month',
y='Inspection closure ratio') +
coord_cartesian(xlim = c(1,12)) +
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")) +
scale_y_continuous(limits=c(0.005,0.035),
breaks=seq(0,0.035,0.005),
labels=scales::percent) +
scale_color_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
trendClosures = inspections %>%
group_by(month, boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspection = n(),
ratio = closures / inspection)
ggplot(data=trendClosures, aes(x=month, y=ratio)) +
geom_freqpoly(stat='identity', aes(color=boro)) +
labs(title='Inspection closure ratio by month and borough',
x='Month',
y='Inspection closure ratio') +
coord_cartesian(xlim = c(1,12)) +
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")) +
scale_y_continuous(limits=c(0.005,0.035),
breaks=seq(0,0.035,0.005),
labels=scales::percent) +
scale_color_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
inspClosByMonthBoro = inspections %>%
group_by(month, boro) %>%
summarise(closures = sum(action == 'closed' | action == 'reclosed'),
inspection = n(),
ratio = closures / inspection)
ggplot(data=inspClosByMonthBoro, aes(x=month, y=ratio)) + geom_freqpoly(aes(color=boro), stat="identity")+
scale_x_continuous(breaks = 1:12,
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
df_origin_homicide = read.csv("./homicide-database_original.csv")
df_origin_homicide = read.csv("homicide-database_original.csv")
df_origin_homicide = read.csv("./csv_data/homicide-database_original.csv")
setwd("~/workspace/shinyProject")
setwd("~/workspace/shinyProject")
df_origin_homicide = read.csv("./csv_data/homicide-database_original.csv")
df_origin_homicide
head(df_origin_homicide)
View(df_origin_homicide)
df_raw_homicide = read.csv("./csv_data/homicide-database_raw.csv")
View(df_raw_homicide)
# check data unique value by cloumn
df_raw_homicide %>% distinct()
# use library
libarary(dplyr)
# use library
library(dplyr)
# check data unique value by cloumn
df_raw_homicide %>% distinct()
# check data unique value by cloumn
df_raw_homicide %>% distinct(Record.ID)
# check data unique value by cloumn
df_raw_homicide %>% distinct(Agency.Code)
# check data unique value by cloumn
df_raw_homicide %>% distinct(State)
df_raw_homicide
# check data unique value by cloumn
df_raw_homicide %>% distinct(col(df_raw_homicide))
# check data unique value by cloumn
df_raw_homicide %>% distinct(names(df_raw_homicide))
names(df_raw_homicide)
names(df_raw_homicide)[1]
# check data unique value by cloumn
for(i in 1: length(names(df_raw_homicide))){
print("colnum name : "  ,names(names(df_raw_homicide)[i]))
print("unique value : " ,distinct(names(df_raw_homicide)[i]))
}
cat("unique value : " ,distinct(names(df_raw_homicide)[i]))
distinct(names(df_raw_homicide)[1])
names(df_raw_homicide)[1]
distinct(df_raw_homicide,names(df_raw_homicide)[1])
distinct(df_raw_homicide,names(df_raw_homicide)[1])
distinct(df_raw_homicide,Record.ID)
distinct(df_raw_homicide,state)
distinct(df_raw_homicide,State)
distinct(df_raw_homicide,names(df_raw_homicide)[6])
names(df_raw_homicide)[6])
names(df_raw_homicide)[6]
class(names(df_raw_homicide)[6])
# check data unique value by cloumn
for(i in 1: length(names(df_raw_homicide))){
print("colnum name : "  ,names(names(df_raw_homicide)[i]))
print("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i]))
}
# check data unique value by cloumn
for(i in 1: length(names(df_raw_homicide))){
print("colnum name : "  ,names(df_raw_homicide)[i])
print("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i]))
}
length(names(df_raw_homicide))
names(df_raw_homicide)[1]
# check data unique value by cloumn
for(i in 1: length(names(df_raw_homicide))){
print("colnum name : "  ,names(df_raw_homicide)[i])
# print("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i]))
}
# check data unique value by cloumn
for(i in 1: length(names(df_raw_homicide))){
#print("colnum name : "  ,names(df_raw_homicide)[i])
print(names(df_raw_homicide)[i])
# print("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i]))
}
View(df_origin_homicide)
# check data unique value by cloumn
for(i in 1: length(names(df_raw_homicide))){
print(paste("colnum name : "  ,names(df_raw_homicide)[i]))
print(paste("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i])))
}
dim(homi.r)
# check data unique value by cloumn
names(df_raw_homicide) <- tolower(names(df_raw_homicide))
dim(df_raw_homicide)
dim(df_raw_homicide)
sapply(homi.r[1,],class)
sapply(df_raw_homicide[1,],class)
print(paste("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i])))
print(paste("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i])))
print(paste("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i])))
unique(df_raw_homicide[names(df_raw_homicide)[1]])
# check data unique value by cloumn
names(df_raw_homicide) <- tolower(names(df_raw_homicide))
for(i in 1: length(names(df_raw_homicide))){
print(paste("colnum name : "  ,names(df_raw_homicide)[i]))
#print(paste("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i])))
print(paste("unique value : " , unique(df_raw_homicide[names(df_raw_homicide)[i]])))
print("*"*30)
}
print('*'30)
?rep()
print(rep('*',30))
print(rep('*',10))
for(i in 1: length(names(df_raw_homicide))){
print(paste("colnum name : "  ,names(df_raw_homicide)[i]))
#print(paste("unique value : " , distinct(df_raw_homicide, names(df_raw_homicide)[i])))
print(paste("unique value : " , unique(df_raw_homicide[names(df_raw_homicide)[i]])))
print(rep('*',10))
}
names(df_raw_homicide)
#drop column
df_homicide <- df_raw_homicide[ , !(names(df_raw_homicide) %in% ('agecny'))]
df_homicide
View(df_homicide)
